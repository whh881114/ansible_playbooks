---
- name: copy zookeeper
  copy:
    src: "{{ zookeeper_pkg }}"
    dest: "{{ resource_dir }}/{{ zookeeper_pkg }}"

- name: install zookeeper package
  shell: |
    cd {{ resource_dir }}
    tar xf {{ zookeeper_pkg }} -C {{ pkg_installed_dir }}

- name: create zookeeper data directory
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ common_user }}"
    group: "{{ common_group }}"
  with_items:
    - "{{ zookeeper_data_path }}"
    - "{{ zookeeper_log_path }}"

- name: generate zk config
  template:
    src: "{{ zookeeper_version }}/{{ item.src }}"
    dest: "{{ zookeeper_home }}/conf/{{ item.dest }}"
    owner: "{{ common_user }}"
    group: "{{ common_group }}"
  with_items:
    - { src: zoo.cfg.j2, dest: zoo.cfg }
    - { src: zookeeper-env.sh.j2, dest: zookeeper-env.sh }

- name: chown {{ pkg_installed_dir }}
  file:
    path: "{{ pkg_installed_dir }}"
    recurse: yes
    owner: "{{ common_user }}"
    group: "{{ common_group }}"

- name: create zk id
  shell: echo {{ zookeeper_myid }} > {{ zookeeper_data_path }}/myid

- name: generate zk system service
  template:
    src: "{{ zookeeper_version }}/zookeeper.service"
    dest: "{{ systemd_conf_dir }}/"
  notify:
    - systemctl-daemon-reload
    - restart-zookeeper
